{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red193\green193\blue193;}
{\*\expandedcolortbl;;\cssrgb\c80000\c80000\c80000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24740\viewh12940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Last modified (yyyy/mm/dd): 2024/08/23\
Author: Alessandro Ulivi (ale.ulivi@gmail.com)\
\
===========================\
===========================\
DESCRIPTION\
===========================\
===========================\
Disclaimer: the script was created from multi_channels_multi_quantifications.py. It has been tested to run without returning errors and to return reliable quantifications on a few samples, but it did not go through a full, deep and detailed testing procedure on multiple samples. The quantification functions are not modified with respect to multi_channels_multi_quantifications.py, when they went through an accurate and deep testing, but the structure of the data which are passed to them changed. As of the 2024/08/23, because the script was created from multi_channels_multi_quantifications.py, the terminology through the script and the documentation could be a bit ambiguous.\
\
Given an ndarray (channels_array), it returns several measurements. The measurements are all based on a semantic segmentation of the structures in the channels_array\
\
It is possible to indicate a dimension of channels_array to use as analysis_axis. When analysis_axis is indicated, the ndarray is splat in sub-arrays along the analysis_axis (analysis_array_h, analysis_array_m, \'85 ) and the measurements are returned per each individual sub-array.\
\
The function was built to try to be as flexible as possible, including the fact that:\
- analysis_axis can be at any position in channels_array.shape.\
- channels_array can be n-dimensional.\
- It is possible to restrict the analysis to specific regions of interest (ROIs) by passing an roi_mask_array.\
- channel_array and roi_mask_array do not need to be binary and their binarisation (which is required for the measurements) accepts thresholds which could be different for different sub-sections of the arrays.\
- Each individual parameter can be passed in multiple format, in order to personalise its application for different sub-sections of channels_array.\
\
===========================\
===========================\
INPUTS\
===========================\
===========================\
- channels_array. ndarray. The array can\'92t contain dimensions of size 1. The array does not need to be binary, but it will be binarised using the channels_binarization_thresholds as an highpass threshold: pixels whose intensity value is >channels_binarization_thresholds are considered pixels of interest and analysed for their properties. NOTE WELL: on 2024/08/23 I established the script and used it within apply_quantification.py. For the script to run properly I had to use channels_array as it is when no analysis_axis is provided, but I had to add an extra dimension of size 1 if analysis_axis was provided. I am confident that the issues is in the fact that channels_array is created using np.stack and analysis_axis is changed accordingly, as the procedure was conceptualised for multiple-channel channels_array. However it is worth noticing it here, if the output of the present script is not what expected, it could be useful to further investigate the issue.\
\
- roi_mask_array. Ndarray. The number of dimensions must be <= to the number of dimensions of channels_array. If the number of dimension is equal to the number of dimensions of channels_array, their shape must be identical (the number of axis, their size and positioning in channels_array.shape must match). If the number of dimensions is < than the number of dimensions of channels_array, each dimension of roi_mask_array must have a dimension of the same size in channels_array. roi_mask_array is processed by match_arrays_dimensions (within utils.py) to match channels_array\'92s dimensions. Refer to that documentation. The array does not need to be binary, but it will be binarised using the count_regions_number_threshold_roi_mask as an highpass threshold: pixels whose intensity value is >count_regions_number_threshold_roi_mask are considered pixels of interest.\
\
- analysis_axis. None or int. Default None. If int, it must be different from channels_axis. If None, channels_array will be analysed as it is. If int, channels_array will firstly be splat in sub-arrays along the analysis_axis and each of this sub-array will be analysed.\
\
- no_quantification_valu_e. Any. Default np.nan. The value to return when a measurement can\'92t be performed.\
\
The following apply to all the next parameters:\
1) the value can be int, float, bool, iterable (tuple or list) or ndarray. If ndarray it must have a number of dimensions equal to channels_array or 1 extra dimension than channels_array. If ndarray, if analysis_axis is provided, the dimension corresponding to analysis_axis must have size >= to the size of analysis_axis. If ndarray it must not have a dimension of size 1.\
\
2) The parameters specify the thresholds/hyper-parameters to pass to each specific quantification  of channels_array and, if analysis_axis is provided, at each specific sub-array along the analysis_axis.\
\
3) if int, float or bool. The indicated value will be applied to each analysed sub-array.\
\
4) if iterable (tuple or list). The parameter is interpreted as a multi-parameter. This option is meant for measurements which have hyper-parameters requiring tuples or list objects.\
\
5) if ndarray. I call the array parameter_ndarray. Being i the index of the channel_array_i along the analysis_axis, the hyper-parameter for the analysis of channel_array_i will be taken from the sub-array at the position i on the dimension corresponding the analysis_axis. This allows to pass hyper parameters which are specific to each analysed channel_array_i along the analysis_axis.\
\
6) if ndarray. By default, the hyper-parameter value is obtained as the mean value of the parameter_sub-array_i of the parameter_ndarray (refer to point 5). It is however possible to change this behaviour by setting the variable get_a_single_value to False when calling the get_threshold_from_list function. This will return the entire parameter_sub-array_i which will be to pass as hyper parameters to specific measurements. This allows (in theory - not tested yet) to define functions where an array under analysis has different thresholds in different sub-sections.\
\
7) if the hyper parameter of a measurement requires an iterable (tuple or list), and it should be diversified for individual analysis_arrays (note from point 4 that passing a list or tuple applies an identical muti-parameter to each analysed array), it is possible to pass an ndarray with a one extra-numerary dimension than channels_array, and store the multi-parameters (the list or tuple) in this extra dimension. However the extra dimension must be at position -1.\
\
8) For more details on how parameters are treated it is possible to refer to the sub-functions set_thresholds_2use, split_thresholds_arrays and get_threshold_from_list in quantifiy_channels.\
\
- channels_binarization_thresholds. Int, float or ndarray of int/floats. Default 0. The value to use as highpass threshold for binarising channels_array (or channel_array_i if analysis_axis is provided). Applies to measurements get_mask_area (parameter binarization_threshold), count_regions_number (parameter threshold_input_arr), get_areas_of_regions_in_mask (parameter binarization_threshold), measure_regions_euclidean_distances_within_array (parameter label_img_thres), get_covex_hull_from_mask (parameter threshold_4arr), measure_pixels_overlap (parameter val_threshold_arr_1), measure_regions_euclidean_distances (parameter label_img_1_thres), count_number_of_overlapping_regions (parameter arr_1_tot_thres), get_convex_hull_fraction (parameter threshold_arr_1).\
\
- transform_to_label_img. Bool or ndarray of bool. Default False. Whether channels_array (or channel_array_i if analysis_axis is provided)) is to be transformed to a label image when doing a measurement. Applies to measurements get_areas_of_regions_in_mask (parameter transform_to_label_img), measure_regions_euclidean_distances_within_array (parameter transform_to_label_img), measure_regions_euclidean_distances (parameter transform_to_label_img), count_number_of_overlapping_regions (parameters transform__to_label_img_arr_1 and transform__to_label_img_arr_2)). \
\
- get_mask_area_val_4zero_regionprops. Int, float or ndarray of int/floats. Default 0. The value to return if regionprops analysis (https://scikit-image.org/docs/stable/api/skimage.measure.html#skimage.measure.regionprops) returns an empty list (aka, no regions are present in the analysed array). Applies to measurements get_mask_area (parameter value_4_zero_regionprops).\
\
- count_regions_number_threshold_roi_mask. Int, float or ndarray of int/floats. Default 0. Defines the value to use as highpass threshold for binarising roi_mask_array (or roi_mask_array_i if analysis_axis is provided)). Pixels of intensity value >count_regions_number_threshold_roi_mask are considered pixels of interest. Applies to measurements count_regions_number (parameter threshold_roi_mask), get_covex_hull_from_mask (parameter threshold_4roi), get_convex_hull_fraction (parameters threshold_roi_mask_1 and threshold_roi_mask_2). 
\f1 \cf2 \expnd0\expndtw0\kerning0
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
- n_of_region_4areas_measure. Int, float or ndarray of int/floats. Default 0. It must be >=0. The highpass threshold to decide if measurements about the areas of regions within array channels_array (or channel_array_i if analysis_axis is provided) will be conducted. Measurements are conducted if channels_array (or channel_array_i if analysis_axis is provided) has >n_of_region_4areas_measure regions.  Applies to get_areas_of_regions_in_mask.\
\
- reg_eucl_dist_within_arr_val_n_regions_nopass. Int, float or ndarray of int/floats. Default 1. It must be >=1. The highpass threshold for measurements about the distances between the regions of channels_array (or channel_array_i if analysis_axis is provided). Measurements are done if > reg_eucl_dist_within_arr_val_n_regions_nopass regions are detected in channels_array (or channel_array_i if analysis_axis is provided). Applies to measure_regions_euclidean_distances_within_array (parameter highpass_n_regions).\
\
- get_convex_hull_min_px_num. Int, float or ndarray of int/floats. Default 2. It must be >=2. The highpass threshold for measurement of channels_array (or channel_array_i if analysis_axis is provided) convex hull volume. Measurements are done if > get_convex_hull_min_px_num pixels are present in channels_array (or channel_array_i if analysis_axis is provided) segmented mask. Applies to get_covex_hull_from_mask (parameter min_px_num).\
\
\
===========================\
===========================\
OUTPUTS\
===========================\
===========================\
Pandas data frame.\
\
If no analysis_axis is provided the data frame has 1 row and as many columns as the measurements which have been done.\
If analysis_axis is provided the data frame has as many rows as the number of sub-arrays along the analysis_arrays (analysis_array_h, analysis_array_m, \'85 ) and as many columns as the measurements which have been done.\
\
The measurements for the following functions are done.\
\
- get_mask_area. Refer to geometric_measurements.py.\
- count_regions_number. Refer to counting_measurements.py.\
- get_areas_of_regions_in_mask. Refer to geometric_measurements.py.\
- measure_regions_euclidean_distances_within_array. Refer to topological_measurements.py.\
- get_covex_hull_from_mask. Refer to geometric_measurements.py.\
\
\
I describe below the measurement per each column name of the Pandas data frame output of the analysis.\
\
\
\
CONVENTIONS\
- channel. It refers to the array which is quantified. For example, if the binary mask of structure A is quantified, it is a channel.\
\
- frame i. When channels_array is analysed along an axis, frame I is the sub-image within channels_array which is analysed. For example, if channels_array is a timecourse of structure A, frame i is the individual timepoint.\
\
- Region. Any portion of a binary mask which is fully surrounded by background pixels and, thus, not connected to other portions of the mask. The extraction of regions is based on the skimage.measure.label function (https://scikit-image.org/docs/stable/api/skimage.measure.html#skimage.measure.label), refer also to its documentation. NOTE: there is no threshold in terms of pixel number to define a region, thus a single pixel is a region. When this is a problem, a highpass threshold should be introduced before inputing the channel to the quantification, so that it has no regions smaller than the highpass threshold.\
\
- Region a + [arabic number]. The regions of channels_array (or frame i).\
\
\
PARAMETERS VALUES\
- n_of_region_4areas_measurement=0. Refers to mean_regions_area_[channel], median_regions_area_[channel], stdv_regions_area_[channel], sem_regions_area_[channel], min_regions_area_[channel], max_region_area_[channel].\
\
- reg_eucl_dist_within_arr_val_n_regions_nopass = 0. Refers to mean_region_min_distances_[channel], median_region_min_distances_[channel], stdv_region_min_distances_[channel],  sem_region_min_distances_[channel], min_region_min_distances_[channel], max_region_min_distances_[channel], mean_region_max_distances_[channel], median_region_max_distances_[channel], stdv_region_max_distances_[channel],  sem_region_max_distances_[channel], min_region_max_distances_[channel], max_region_max_distances_[channel], mean_region_mean_distances_[channel], median_region_mean_distances_[channel], stdv_region_mean_distances_[channel],  sem_region_mean_distances_[channel], min_region_mean_distances_[channel], max_region_mean_distances_[channel]. Sets the parameter highpass_n_regions in measure_regions_euclidean_distances_within_array.\
\
- get_convex_hull_min_px_num=2. Refer to convex_hull_volume_[channel]. Sets the parameter min_px_num in get_covex_hull_from_mask.
\f1 \cf2 \expnd0\expndtw0\kerning0
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
MEASUREMENTS\
- area_[channel]. The total number of pixels of channels_array segmented mask. Unit=pixels. Obtained from get_mask_area (geometric_measurements.py).\
\
- region_number_[channel]. The total number of regions in channels_array segmented mask. Obtained from count_regions_number (counting_measurements.py).\
\
- mean_regions_area_[channel]. The mean area of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- median_regions_area_[channel]. The median area of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- stdv_regions_area_[channel]. The standard deviation of the areas of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- sem_regions_area_[channel]. The standard error of the means of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- min_regions_area_[channel]. The smallest area among the areas of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- max_region_area_[channel]. The largest area among the areas of the regions in channels_array segmented mask. It is only calculated if at least a region is present in channels_array segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- number_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports how many distances are calculated for channels_array . It is 0 if channels_array has 0 regions, it is 1 if channels_array has 2 regions, it can have different values depending on the regions topology if channels_array  has more than 2 regions. Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the mean of these minimum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the median of these minimum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard deviation of these minimum distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard error of the means of these minimum distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the smallest of these minimum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_min_distances_[channel]. Per each region a1 of channels_array, the minimum euclidean distance with the pooled remaining regions of channels_array is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the longest of these minimum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- number_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array, the distance is calculated only once. This parameter reports how many distances are calculated for channels_array . It is 0 if channels_array has 0 regions, it is 1 if channels_array has 2 regions, it can have different values depending on the region topology if channels_array  has more than 2 regions. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the mean of these maximum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present).  Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the median of these maximum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard deviation of these maximum distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard error of the means of these maximum distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the smallest of these maximum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_max_distances_[channel]. Per each region a1 of channels_array, the maximum euclidean distance with the pooled remaining regions of channels_array is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the longest of these maximum distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- number_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports how many distances are calculated for channels_array . It is 0 if channels_array has 0 regions, it is 1 if channels_array has 2 regions, it corresponds to number of regions in channels_array if channels_array  has more than 2 regions. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the mean of these mean distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the median of these mean distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard deviation of these mean distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the standard error of the means of these mean distances. It is only calculated if at least 3 distances are calculated in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the smallest of these mean distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_mean_distances_[channel]. Per each region a1 of channels_array, the mean euclidean distance with the pooled remaining regions of channels_array is calculated. When the mean distance between region a1 and region a2 is identical, for example because only 2 regions are present in channels_array , the distance is calculated only once. This parameter reports the longest of these mean distances. It is only calculated if at least 2 regions are present in channels_array. The parameter reg_eucl_dist_within_arr_val_n_regions_nopass can be used to increase the minimum number of regions required to do the measurement (measurement is done if >reg_eucl_dist_within_arr_val_n_regions_nopass are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- convex_hull_volume_[channel]. The volume of the convex hull (https://en.wikipedia.org/wiki/Convex_hull) which can be obtained with the pixels of channels_array segmented mask. The measurement is done only if channels_array segmented mask has more than 2 pixels. The parameter get_convex_hull_min_px_num can be used to increase the highpass threshold for doing the quantification (quantification is done if number of pixels of channels_array segmented mask is >get_convex_hull_min_px_num). The name \'93volume\'94 follows scipy convention (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html) which is used for calculating the convex hull. The volume reduces to area if channels_array segmented mask is 2D. Unit=pixels. Obtained from get_covex_hull_from_mask (geometric_measurements.py).\
}