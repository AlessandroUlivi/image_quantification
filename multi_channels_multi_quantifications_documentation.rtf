{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red193\green193\blue193;}
{\*\expandedcolortbl;;\cssrgb\c80000\c80000\c80000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24740\viewh12940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Last modified (yyyy/mm/dd): 2024/08/08\
Author: Alessandro Ulivi (ale.ulivi@gmail.com)\
\
===========================\
===========================\
DESCRIPTION\
===========================\
===========================\
Given an ndarray (channels_array), it returns several measurements for each sub-array (channel_i) obtained by splitting the channel_array along an axis (channels_axis). The measurements include both properties of channel_i and and comparative measurement between channel_i and the remaining channels (channel_j, channel_k, \'85 ) within channels_array. The measurements are all based on a semantic segmentation of the structures in the each channel.\
\
It is possible to indicate a dimension of channels_array to use as analysis_axis. analysis_axis must be different from channel_axis. When analysis_axis is indicated, the ndarray is splat in sub-arrays along the analysis_axis (analysis_array_h, analysis_array_m, \'85 ) and the measurements are returned per each individual sub-array. This means that analysed channel_arrays (channel_j, channel_k, \'85) are extracted and analysed along the channel_axis per each analysis_array (analysis_array_ih, analysis_array_im, analysis_array_jh, analysis_array_jm, analysis_array_kh, analysis_array_km, \'85 where i, j, k correspond to the channel and h, m to the analysis_axis position).\
\
The function was built to try to be as flexible as possible, including the fact that:\
- channels_axis and analysis_axis can be at any position in channels_array.shape.\
- channels_array can be n-dimensional.\
- It is possible to restrict the analysis to specific regions of interest (ROIs) by passing an roi_mask_array.\
- channel_array and roi_mask_array do not need to be binary and their binarisation (which is required for the measurement) accepts thresholds which could be different for different channels and even within sub-sections of a channel.\
- Each individual parameter can be passed in multiple format, in order to personalise its application for different sub-sections of each individual channel.\
\
However it is important to note that the function was conceptualised and only tested using 4D binary masks as inputs.\
\
\
===========================\
===========================\
INPUTS\
===========================\
===========================\
- channels_array. ndarray. There must not be dimensions of size 1. The array does not need to be binary, but it will be binarised using the channels_binarization_thresholds.\
\
- channels_axis. Int. The axis to use in channels_array to get the arrays of individual channels to be analysed. Default 0. NOTE: if channels_axis is in position 0, it can\'92t be indicated with negative number.\
\
- roi_mask_array. Ndarray. The number of dimensions must be <= to the number of dimensions of channels_array. If the number of dimension is equal to the number of dimensions of channels_array, their shape must be identical (the number of axis and their size must match). If the number of dimensions is < then the number of dimensions of channels_array, each dimension of roi_mask_array must have a dimension of the same size in channels_array. roi_mask_array is processed by match_arrays_dimensions (within utils.py) to match channels_array\'92s dimensions. Refer to that documentation. The array does not need to be binary, but it will be binarised using the count_regions_number_threshold_roi_mask.\
\
- analysis_axis. None or int. Default None. If int, it must be different from channels_axis. If None, channels_array will be analysed per each sub-array obtained by splitting the channels_axis. If int, channels_array will firstly be splat in sub-arrays along the analysis_axis and each of this sub-array will be analysed for the sub-sub-array obtained by splitting the channel_axis.\
\
- shuffle_times. Int. Default 0. The number of times to perform a measurement after randomly shuffling the pixels of the channel/channels. Only applies to measurements where shuffle times is possible, precisely the function measure_pixels_overlap (co_localization_measurements.py) where it modifies the input parameter shuffle_times. Refer to its documentation.\
\
- no_quantification_valu_e. Any. Default np.nan. The value to return when a measurement can\'92t be performed.\
\
- get_conv_hull_fract_arr1_NOpass_arr2_pass_v. Any. Default 0. The value to pass to the val_4_arr1_NOpassthres_arr2_passthres variable in get_convex_hull_fraction. Refer to get_convex_hull_fraction within topological_measurements.py.\
\
- get_conv_hull_fract_arr2_NOpass_v. Any. Default np.nan. The value to pass to the val_4_arr2_NOpassthres variable in in get_convex_hull_fraction. Refer to get_convex_hull_fraction within topological_measurements.py.\
\
\
The following apply to all the next parameters:\
1) the value can be int, float, bool, iterable (tuple or list) or ndarray. If ndarray it must have a number of dimensions equal to channels_array or 1 extra dimension than channels_array. If ndarray, the dimension corresponding to channels_array\'92s channels_axis must have size >= to the size of channels_axis. If ndarray, if analysis_axis is provided, the dimension corresponding to analysis_axis must have size >= to the size of analysis_axis. If ndarray it must not have a dimension of size 1.\
\
2) The parameters specify the thresholds/hyper-parameters to pass to each specific quantification and at each specific sub-array of channels_array along the channels_axis and (eventually) the analysis_axis.\
\
3) if int, float or bool. The indicated value will be applied to each analysed array.\
\
4) if iterable (tuple or list). The parameter is interpreted as a multi-parameter. This means that the tuple/list will be passed to each analysed array. NOTE: this should not be confused with the fact that each value of the tuple/list is applied to a different channel_array or analysis_array. Instead this option is meant for measurements which have hyper-parameters requiring tuples or list objects.\
\
5) if ndarray. I call the array parameter_ndarray. Being i the index of the channel_array_i along the channels_axis (being ij the indices of the sub-array_ij along, respectively, the channels_axis and the analysis_axis), the hyper-parameter for the analysis of channel_array_i will be taken from the sub-array at the position i (parameter_sub-array_i) on the dimension corresponding the channels_axis in the parameter_ndarray (the hyper-parameter for the analysis of sub-array_ij will be taken from the sub-array at the position ij [parameter_sub-array_ij] along the dimensions corresponding to, respectively, channels_axis and analysis_axis, in the parameter_ndarray). This allows to pass hyper parameters which are specific to each analysed channel_array_i and sub-array_ij along the analysis_axis.\
\
6) if ndarray. By default, the hyper-parameter value is obtained as the mean value of the parameter_sub-array_i (or parameter_sub-array_ij) of the parameter_ndarray (refer to point 5). It is however possible to change this behaviour by setting the variable get_a_single_value to False when calling the get_threshold_from_list function. This will return the entire parameter_sub-array_i (or parameter_sub-array_ij) and, in theory (note that has not been tested) if a function allows them it would allow to pass entire arrays as hyper parameters to specific measurements.\
\
7) if a the hyper parameter of a measurement requires an iterable (tuple or list), and it should be diversified for individual channels_arrays and/or analysis_arrays (note from point 4 that passing a list or tuple applies the parameter identical to each analysed array), it is possible to pass ndarray of with a one extra-numerary dimension than channels_array, and store the multi-parameters (the list or tuple) in this extra dimension. However the extra dimension must be at position -1.\
\
8) For more details on how parameters are treated it is possible to refer to the sub-functions set_thresholds_2use, split_thresholds_arrays and get_threshold_from_list in quantifiy_channels.\
\
- channels_binarization_thresholds. Int, float or ndarray of int/floats. Default 0. The value to use as highpass threshold for binarising channel_array_i (or sub-array_ij). Applies to measurements get_mask_area (parameter binarization_threshold), count_regions_number (parameter threshold_input_arr), get_areas_of_regions_in_mask (parameter binarization_threshold), measure_regions_euclidean_distances_within_array (parameter label_img_thres), get_covex_hull_from_mask (parameter threshold_4arr), measure_pixels_overlap (parameter val_threshold_arr_1), measure_regions_euclidean_distances (parameter label_img_1_thres), count_number_of_overlapping_regions (parameter arr_1_tot_thres), get_convex_hull_fraction (parameter threshold_arr_1).\
\
- transform_to_label_img. Bool or ndarray of bool. Default False. Whether channel_array_i (or sub-array_ij) is to be transformed to a label image when doing a measurement. Applies to measurements get_areas_of_regions_in_mask (parameter transform_to_label_img), measure_regions_euclidean_distances_within_array (parameter transform_to_label_img), measure_regions_euclidean_distances (parameter transform_to_label_img), count_number_of_overlapping_regions (parameters transform__to_label_img_arr_1 and transform__to_label_img_arr_2)). \
\
- get_mask_area_val_4zero_regionprops. Int, float or ndarray of int/floats. Default 0. The value to return if regionprops analysis (https://scikit-image.org/docs/stable/api/skimage.measure.html#skimage.measure.regionprops) returns an empty list. Applies to measurements get_mask_area (parameter value_4_zero_regionprops).\
\
- count_regions_number_threshold_roi_mask. Int, float or ndarray of int/floats. Default 0. I call roi_array_i the sub-array at position i on the axis of roi_mask_array corresponding to channels_axis (roi_array_ij the sub-array of roi_mask_array at positions i and j on the axes corresponding, respectively to channels_axis and analysis_axis). count_regions_number_threshold_roi_mask defines the value to use a highpass threshold for binarising roi_array_i (and roi_array_ij). Applies to measurements count_regions_number (parameter threshold_roi_mask), get_covex_hull_from_mask (parameter threshold_4roi), get_convex_hull_fraction (parameters threshold_roi_mask_1 and threshold_roi_mask_2).
\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
- n_of_region_4areas_measure. Int, float or ndarray of int/floats. Default 0. The highpass threshold to decide if measurements about the areas of region within array channel_array_i (or sub-array_ij) will be conducted. Measurements are conducted if channel_array_i (or sub-array_ij) has >n_of_region_4areas_measure regions.  Applies to get_areas_of_regions_in_mask.\
\
- reg_eucl_dist_within_arr_val_n_regions_nopass. Int, float or ndarray of int/floats. Default 1. The highpass threshold for measurements about the distances between the regions of channel_array_i (or sub-array_ij). Measurements are done if > reg_eucl_dist_within_arr_val_n_regions_nopass regions are detected in channel_array_i (or sub-array_ij). Applies to measure_regions_euclidean_distances_within_array (parameter highpass_n_regions).\
\
- get_convex_hull_min_px_num. Int, float or ndarray of int/floats. Defaul 2. The highpass threshold for measurement of channel_array_i (or sub-array_ij) convex hull volume. Measurements are done if > get_convex_hull_min_px_num pixels are present in channel_array_i (or sub-array_ij) segmented mask. Applies to get_covex_hull_from_mask (parameter min_px_num).\
\
- min_px_over_thresh_common. Int, float or ndarray of int/floats. Default -1. The highpass threshold for doing all analysis comparing channel_array_i (or sub-array_ij) and channel_array_k (or sub-array_kj). Comparative measurements are done if the number of pixels in channel_array_i > min_px_over_thresh_common_i and the number of pixels in channel_array_k > min_px_over_thresh_common_k (number of pixels in sub-array_ij > min_px_over_thresh_common_ij and sub-array_kj > min_px_over_thresh_common_kj).\
\
- measure_pixels_overlap_n_px_thr_1. Int, float or ndarray of int/floats. Default 1. The highpass threshold for the analysis of pixels overlap between channel_array_i (or sub-array_ij) and channel_array_k (or sub-array_kj). The analysis is done if channel_array_i (or sub-array_ij) number of pixel > measure_pixels_overlap_n_px_thr_1. Applies to measure_pixels_overlap (parameter n_px_thr_1).\
\
- measure_pixels_overlap_n_px_thr_2. Int, float or ndarray of int/floats. Default 0. The highpass threshold for the analysis of pixels overlap between channel_array_i (or sub-array_ij) and channel_array_k (or sub-array_kj). The analysis is done if channel_array_k (or sub-array_kj) number of pixel > measure_pixels_overlap_n_px_thr_2. Applies to measure_pixels_overlap (parameter n_px_thr_2).\
\
- count_n_overl_reg_intersection_threshold. Multi-threshold. Tuple, list or ndarray with one extra dimension than channels_array\'92s dimensions, and where multi-values are stored in dimension -1. The length of the list, tuple or the size of the -1 dimension if ndarray must be equal to the square of the number of channels. The highpass threshold value to define if two regions are intersecting when measuring count_number_of_overlapping_regions. Regions are considered intersecting if >count_n_overl_reg_intersection_threshold pixels are in common. Because this is a comparison measurements, the position along the multi-threshold indicate the threshold per each comparison. For example, if channels_array has 2 channels (channel_i and channel_k), 4 comparisons are possible (channel_i with channel_i, channel_i with channel_k, channel_k with channel_i and channel_k with channel_k). The multi-threshold must have a length 4 (4 values). The value at position 0 indicate the threshold for channel_i with channel_i comparison, the value at position 1 the threshold for the comparison channel_i with channel_k and so on. When more channels are present, the same logic applies. NOTE: comparison between the same channel are skipped, but the value must be present. Applies to parameter intersection_threshold in count_number_of_overlapping_regions.\
\
- conv_hull_fract_px_thre_arr_1. Int, float or ndarray of int/floats. Default 3. The highpass threshold for measuring the fraction of channels convex hull volumes between channel_array_i (or sub-array_ij) and channel_array_k (or sub-array_kj). The measurement is done if the number of pixels in channel_array_i (or sub-array_ij) is >= conv_hull_fract_px_thre_arr_1. Applies to get_convex_hull_fraction (parameter px_thre_arr_1).\
\
- conv_hull_fract_px_thre_arr_2. Int, float or ndarray of int/floats. Default 3. The highpass threshold for measuring the fraction of channels convex hull volumes between channel_array_i (or sub-array_ij) and channel_array_k (or sub-array_kj). The measurement is done if the number of pixels in channel_array_k (or sub-array_kj) is >= conv_hull_fract_px_thre_arr_2. Applies to get_convex_hull_fraction (parameter px_thre_arr_2).\
\
\
===========================\
===========================\
OUTPUTS\
===========================\
===========================\
Pandas data frame.\
\
If no analysis_axis is provided the data frame has 1 row, corresponding to the channels_array, and as many columns as the measurements which have been done.\
If analysis_axis is provided the data frame has as many rows as the number of sub-array along the analysis_arrays (analysis_array_h, analysis_array_m, \'85 ) and and as many columns as the measurements which have been done.\
\
For all channels (channel_i, channel_j, channel_k, \'85 ) of channels_array, and all possible channel pairs (channel_i vs channel j, channel_i vs channel_k, \'85) , excluding the comparison of a channel with itself (channel_i vs channel_i, channel_j vs channel_j, \'85), the measurements for the following functions are done. When an analysis_axis is provided for all sub_array along analysis_axis (analysis_array_h, analysis_array_m, \'85 ) the following measurements are done per each channel (analysis_array_ih, analysis_array_im, analysis_array_jh, analysis_array_jm, analysis_array_kh, analysis_array_km, \'85 where i, j, k correspond to the channel and h, m to the analysis_axis position) and channel pair (analysis_array_ih vs analysis_array_jh, analysis_array_ih vs analysis_array_kh, analysis_array_jh vs analysis_array_kh, analysis_array_im vs analysis_array_jm, analysis_array_im vs analysis_array_km, analysis_array_jm vs analysis_array_km, \'85 ) , excluding the comparison of a channel with itself.\
\
- get_mask_area. Refer to geometric_measurements.py.\
- count_regions_number. Refer to counting_measurements.py.\
- get_areas_of_regions_in_mask. Refer to geometric_measurements.py.\
- measure_regions_euclidean_distances_within_array. Refer to topological_measurements.py.\
- get_covex_hull_from_mask. Refer to geometric_measurements.py.\
- measure_pixels_overlap. Refer to co_localization_measurements.py.\
- measure_regions_euclidean_distances. Refer to co_localization_measurements.py.\
- count_number_of_overlapping_regions. Refer to co_localization_measurements.py.\
- get_convex_hull_fraction. Refer to topological_measurements.py.\
\
\
I describe below the measurement per each column name of the Pandas data frame output of the analysis.\
\
\
\
CONVENTIONS\
- channel. It refers to individual arrays which are quantified. For example, if the binary mask of structure A and the binary mask of structure B are quantified, each binary mask is a channel.\
\
- channel i. The channel under analysis for a certain measurement.\
\
- channel j. When two channels are analysed, for example because they are compared for a certain measurement, the second channel is called channel j.\
\
- frame n. When channel i is analysed along an axis, frame n is the sub-image within channel i which is analysed. For example, if channel i is a timecourse of structure A, frame n is the individual timepoint.\
\
- frame m. Same as frame n, but for channel j, when channel i is compared to channel j.  \
\
- Region. Any portion of a binary mask which is fully surrounded by background pixels and, thus, not connected to other portions of the mask. The extraction of regions is based on the skimage.measure.label function (https://scikit-image.org/docs/stable/api/skimage.measure.html#skimage.measure.label), refer also to this documentation. NOTE: there is no threshold in terms of pixel number to define a region, thus a single pixel is a region. When this is a problem, a highpass threshold should be introduced before inputing the channel to the quantification, so that it has no regions smaller than the highpass threshold.\
\
- Region a + [arabic number]. The regions of channel i.\
\
- Region b + [roman number]. The regions of channel j.\
\
\
\
PARAMETERS VALUES\
- n_of_region_4areas_measurement=0. Refers to mean_regions_area_[channel], median_regions_area_[channel], stdv_regions_area_[channel], sem_regions_area_[channel], min_regions_area_[channel], max_region_area_[channel].\
\
- highpass_n_regions = 0. Refers to mean_region_min_distances_[channel], median_region_min_distances_[channel], stdv_region_min_distances_[channel],  sem_region_min_distances_[channel], min_region_min_distances_[channel], max_region_min_distances_[channel], mean_region_max_distances_[channel], median_region_max_distances_[channel], stdv_region_max_distances_[channel],  sem_region_max_distances_[channel], min_region_max_distances_[channel], max_region_max_distances_[channel], mean_region_mean_distances_[channel], median_region_mean_distances_[channel], stdv_region_mean_distances_[channel],  sem_region_mean_distances_[channel], min_region_mean_distances_[channel], max_region_mean_distances_[channel]. Set by input reg_eucl_dist_within_arr_val_n_regions_nopass in quantify_channels within multi_channels_multi_quantifications.py.\
\
- min_px_num=2. Refer to convex_hull_volume_[channel]. Set by get_convex_hull_min_px_num in quantify_channels within multi_channels_multi_quantifications.py.
\f1 \cf2 \expnd0\expndtw0\kerning0
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
- min_px_over_thresh_common = -1. Refer to the beginning of comparative analyses between channel i and channel j. \
\
- n_px_thr_1=0 and n_px_thr_2=0. Refer to pixels_overlap_observed_[channel i]_[channel j] and pixels_overlap_shuffle_[channel i]_[channel j]_iter_[q]. Set by inputs measure_pixels_overlap_n_px_thr_1 and  measure_pixels_overlap_n_px_thr_2 in quantify_channels within multi_channels_multi_quantifications.py.
\f1 \cf2 \expnd0\expndtw0\kerning0
\
\

\f0 \cf0 \kerning1\expnd0\expndtw0 - px_thre_arr_1=3 and px_thre_arr_2=3. Refers to convex_hull_fraction_[channel i]_[channel j]. Set by conv_hull_fract_px_thre_arr_1 and conv_hull_fract_px_thre_arr_2 in quantify_channels within multi_channels_multi_quantifications.py.\
\
- intersection_threshold=0. Refer to n_[channel I]_regions_overlap_w_[n]_[channel j]_regions. Set by count_n_overl_reg_intersection_threshold in quantify_channels within multi_channels_multi_quantifications.py.
\f1 \cf2 \expnd0\expndtw0\kerning0
\
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
MEASUREMENTS\
- area_[channel]. The total number of pixels of channel i segmented mask. Unit=pixels. Obtained from get_mask_area (geometric_measurements.py).\
\
- region_number_[channel]. The total number of regions in channel i segmented mask. Obtained from count_regions_number (counting_measurements.py).\
\
- mean_regions_area_[channel]. The mean area of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- median_regions_area_[channel]. The median area of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- stdv_regions_area_[channel]. The standard deviation of the areas of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- sem_regions_area_[channel]. The standard error of the means of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- min_regions_area_[channel]. The smallest area among the areas of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- max_region_area_[channel]. The largest area among the areas of the regions in channel i segmented mask. It is only calculated if at least a region is present in channel i segmented mask. The parameter n_of_region_4areas_measurement can be used to set a higher highpass threshold for the measurement. The measurement is done if >n_of_region_4areas_measurement are present. Unit=pixels. Obtained from get_areas_of_regions_in_mask (geometric_measurements.py).\
\
- number_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports how many distances are calculated for channel i . It is 0 if channel i has 0 regions, it is 1 if channel i has 2 regions, it can have different values depending on the regions topology if channel i  has more than 2 regions. Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the mean of these minimum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the median of these minimum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard deviation of these minimum distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard error of the means of these minimum distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the smallest of these minimum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_min_distances_[channel]. Per each region a1 of channel i, the minimum euclidean distance with the pooled remaining regions of channel i is calculated. When the minimum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the longest of these minimum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- number_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports how many distances are calculated for channel i . It is 0 if channel i has 0 regions, it is 1 if channel i has 2 regions, it can have different values depending on the region topology if channel i  has more than 2 regions. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the mean of these maximum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present).  Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the median of these maximum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard deviation of these maximum distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard error of the means of these maximum distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the smallest of these maximum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_max_distances_[channel]. Per each region a1 of channel i, the maximum euclidean distance with the pooled remaining regions of channel i is calculated. When the maximum distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the longest of these maximum distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- number_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports how many distances are calculated for channel i . It is 0 if channel i has 0 regions, it is 1 if channel i has 2 regions, it corresponds to number of regions in channel i if channel i  has more than 2 regions. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- mean_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the mean of these mean distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- median_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the median of these mean distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- stdv_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard deviation of these mean distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- sem_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the standard error of the means of these mean distances. It is only calculated if at least 3 distances are calculated in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- min_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the smallest of these mean distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- max_region_mean_distances_[channel]. Per each region a1 of channel i, the mean euclidean distance with the pooled remaining regions of channel i is calculated. When the mean distance between region a1 and region a2 is identical, for example because only 2 regions are present in channel i , the distance is calculated only once. This parameter reports the longest of these mean distances. It is only calculated if at least 2 regions are present in channel i. The parameter highpass_n_regions can be used to increase the minimum number of regions required to do the measurement (measurement is done if >highpass_n_regions are present). Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances_within_array (topological_measurements.py).\
\
- convex_hull_volume_[channel]. The volume of the convex hull (https://en.wikipedia.org/wiki/Convex_hull) which can be obtained with the pixels of channel i segmented mask. The measurement is done only if channel i segmented mask has more than 2 pixels. The parameter min_px_num can be used to increase the highpass threshold for doing the quantification (quantification is done if number of pixels of channel i segmented mask is >min_px_num). The name \'93volume\'94 follows scipy convention (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html) which is used for calculating the convex hull. The volume reduces to area if channel i segmented mask is 2D. Unit=pixels. Obtained from get_covex_hull_from_mask (geometric_measurements.py).
\f1 \cf2 \expnd0\expndtw0\kerning0
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
THE FOLLOWING MEASUREMENTS ARE COMPARATIVE MEASUREMENTS BETWEEN CHANNELS. The parameter min_px_over_thresh_common can be used to set a highpass threshold for doing the analyses. Analysis will be done only if both area_channel_i and area_channel_j are >min_px_over_thresh_common.\
\
- pixels_overlap_observed_[channel i]_[channel j]. The fraction of pixels of the binary mask of channel i, which are concomitantly present in the binary mask of channel j. It is only calculated if channel i has at least 1 pixel (to avoid a 0 division). The parameters n_px_thr_1 and n_px_thr_2 can be used, independently, to set a highpass threshold for the number of pixels in binary masks of, respectively, channel i and j, for doing the analysis. The measurement is done only if both channel i number of pixels > n_px_thr_1 and channel j number of pixels is > n_px_thr_2. Obtained from measure_pixels_overlap (co_localization_measurements.py).\
\
- pixels_overlap_shuffle_[channel i]_[channel j]_iter_[q]. The same analysis of pixels_overlap_observed_[channel i]_[channel j], but  done after randomly shuffling the position of the pixels of both channel i and channel j. NOTE: if ROIs are passed to parameters roi_mask_arr_1 and roi_mask_arr_2_against, the shuffling will only be restricted to the portion of the channel i and j defined by, respectively roi_mask_arr_1 and roi_mask_arr_2_against. For example, if roi_mask_arr_1 and roi_mask_arr_2_against are identical and correspond to the embryo cortex, only the pixels of the embryo cortex are shuffled while the imaging background is left intact. The measurement is iterated q times and per each iteration q the measurement is saved.  Obtained from measure_pixels_overlap (co_localization_measurements.py).\
\
- mean_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the mean of these minimum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- median_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the median of these minimum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- stdv_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard deviation of these minimum distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- sem_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard error of the means of these minimum distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- min_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the shortest of these minimum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- max_min_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the minimum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the longest of these minimum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- mean_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the mean of these maximum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- median_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the median of these maximum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- stdv_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard deviation of these maximum distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- sem_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard error of the means of these maximum distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- min_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the shortest of these maximum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- max_max_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the maximum euclidean distance with the pooled regions of channel j is calculated. This parameter reports the longest of these maximum distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- mean_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the mean of these mean distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- median_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the median of these mean distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- stdv_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard deviation of these mean distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- sem_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the standard error of the means of these mean distances. It is only calculated if at least 3 distances are measured. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- min_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the shortest of these mean distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- max_mean_distance_regions_[channel i]_[channel j]. Per each region a1 of channel i, the mean euclidean distance with the pooled regions of channel j is calculated. This parameter reports the longest of these mean distances. It is only calculated if at least 1 region is present in channel i and at least 1 region is present in channel j. Unit=pixels (NOTE: isometric pixels are assumed). Obtained from measure_regions_euclidean_distances (co_localization_measurements.py).\
\
- convex_hull_fraction_[channel i]_[channel j]. The fraction between the volume of the convex hull of channel i and the volume of the convex hull of channel j: convex_hull_volume_channel_i/convex_hull_volume_channel_j. It is only calculated it at least 3 pixels are present channel j. The parameter px_thre_arr_2 can be used for setting a higher highpass thresholds to do the measurement. The measurement is done if the number of pixels in channel j is >px_thre_arr_2. If less than 3 pixels are present in channel i the val_4_arr1_NOpassthres_arr2_passthres is returned. The parameter px_thre_arr_1 can be used for setting a higher highpass thresholds to do the measurement. val_4_arr1_NOpassthres_arr2_passthres is returned if the number of pixels in channel I is <=px_thre_arr_1. The name \'93volume\'94 follows scipy convention (https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html) which is used for calculating the convex hull. The volume reduces to area if channel i  and channel j segmented masks are 2D. Unit=pixels. Obtained from get_convex_hull_fraction (topological_measurements.py).
\f1 \cf2 \expnd0\expndtw0\kerning0
\
\

\f0 \cf0 \kerning1\expnd0\expndtw0 - n_[channel I]_regions_overlap_w_[n]_[channel j]_regions. The number of regions in channel i which have a certain number [n] of overlapping regions in channel j. For example, when the quantification for n_channel_i_regions_overlap_w_3_channel_j_regions is 2, it means that 2 regions of channel i (regions a1 and region a2) have 3 overlapping regions in channel j (region bI, bII and bIII). When the quantification for n_channel_i_regions_overlap_w_4_channel_j_regions is 1, it means that only 1 region of channel i (regions a3) has 4 overlapping regions in channel j (region bII, bIII, bIV and bV). Note that while channel j regions can be shared among channel i regions, channels i regions are only quantified once. The quantification is only done if at least 1 region is present in channel i, while if no regions are present in channel j all regions of channel i are classified as having 0 overlapping regions in channel j. The parameter intersection_threshold sets a highpass filter to define region overlap. Two regions are considered overlapping if they share >intersection_threshold number of pixels.  Obtained from count_number_of_overlapping_regions (co_localization_measurements.py).
\f1 \cf2 \expnd0\expndtw0\kerning0
\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
}